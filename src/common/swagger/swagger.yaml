swagger: "2.0"
info:
  description: "Interactive AuthNexus API documentation"
  version: "1.0.0"
  title: "AuthNexus Doc"
host: "localhost:3000"
basePath: "/"
tags:
  - name: "User Pool"
    description: "Users Pool APIs"
  - name: "Users"
    description: "Users and Auths APIs"
  - name: "Payment"
    description: "RazorPay integration"
  - name: "Documents"
    description: "AWS SDK File Upload"
  - name: "Profile"
    description: "Update User Profile"
  - name: "Role Management"
    description: "Manage Role"
  - name: "Admin Configs"
    description: "Manage admin configurations"
schemes:
  - "http"
  - "https"
paths:
  /user-pool:
    post:
      tags:
        - User Pool 
      summary: Create User Pool
      description: "User pool crud"
      operationId: "createUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create User Pool"
          required: true
          schema:
            $ref: "#/definitions/UserPool"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}:
    put:
      tags:
        - User Pool 
      summary: User pool Update
      description: "User pool Update"
      operationId: "updateUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Update User Pool"
          required: true
          schema:
            $ref: "#/definitions/UserPool" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags:
        - User Pool 
      summary: delete user pool
      description: "User pool crud"
      operationId: "delete user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/users:
    get:
      tags:
        - User Pool 
      summary: List User pool Data
      description: "List User pool Data"
      operationId: "listUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Create User in user Pool
      description: "Create User in user Pool"
      operationId: "createUserInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "User Pool"
          required: true
          schema:
            $ref: "#/definitions/User" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/users/{userId}:
    get:
      tags:
        - User Pool 
      summary: Get User in userpool
      description: "Get User in User pool"
      operationId: "getUserInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "userId"
          in: "path"
          description: "userId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Update User in user Pool
      description: "Update User in user Pool"
      operationId: "updateUserInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "userId"
          in: "path"
          description: "userId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "User Pool"
          required: true
          schema:
            $ref: "#/definitions/User" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags:
        - User Pool 
      summary: delete user in user pool
      description: "User pool crud"
      operationId: "delete user in user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "userId"
          in: "path"
          description: "userId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/groups:
    get:
      tags:
        - User Pool 
      summary: List group in user pool
      description: "List group in user pool"
      operationId: "listGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Create group in user Pool
      description: "Create group in user Pool"
      operationId: "createGroupInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "User Pool"
          required: true
          schema:
            $ref: "#/definitions/Group" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/groups/{groupId}:
    get:
      tags:
        - User Pool 
      summary: Get Group in userpool
      description: "Get User in User pool"
      operationId: "getUserInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "groupId"
          in: "path"
          description: "groupId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Update Group in user Pool
      description: "Update Group in user Pool"
      operationId: "updateGroupInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "groupId"
          in: "path"
          description: "groupId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Group"
          required: true
          schema:
            $ref: "#/definitions/Group" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    put:
      tags:
        - User Pool 
      summary: Update Group in user Pool
      description: "Update Group in user Pool"
      operationId: "updateGroupInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "groupId"
          in: "path"
          description: "groupId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Group"
          required: true
          schema:
            $ref: "#/definitions/Group" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags:
        - User Pool 
      summary: delete group in user pool
      description: "User pool crud"
      operationId: "delete group in user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "groupId"
          in: "path"
          description: "groupId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/groups/{groupId}/users/{userId}:
    delete:
      tags:
        - User Pool 
      summary: delete group in user pool
      description: "User pool crud"
      operationId: "delete group in user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "groupId"
          in: "path"
          description: "groupId"
          required: true
          type: "string"
        - name: "userId"
          in: "path"
          description: "groupId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/signin-exp:
    get:
      tags:
        - User Pool 
      summary: Get Sigin Experience in userpool
      description: "Get Sigin Experience in User pool"
      operationId: "getSignInExpInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    put:
      tags:
        - User Pool 
      summary: Update SignIn Experience in user Pool
      description: "Update SignIn Experience in user Pool"
      operationId: "updateSignInExpInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "SignInExp"
          required: true
          schema:
            $ref: "#/definitions/SignInExp" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/signup-exp:
    get:
      tags:
        - User Pool 
      summary: Get Sigup Experience in userpool
      description: "Get Signup Experience in User pool"
      operationId: "getSignUpExpInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    put:
      tags:
        - User Pool 
      summary: Update SignUp Experience in user Pool
      description: "Update SignUp Experience in user Pool"
      operationId: "updateSignUpExpInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "SignUpExp"
          required: true
          schema:
            $ref: "#/definitions/SignUpExp" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/custom-attributes:
    post:
      tags:
        - User Pool 
      summary: create custom attributes
      description: "Create custom attributes"
      operationId: "createCustomAttributes"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "CustomAttributes"
          required: true
          schema:
            $ref: "#/definitions/CustomAttributesResponse" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/messages:
    get:
      tags:
        - User Pool 
      summary: Get Messaging info in user pool
      description: "Get Messaging info in user pool"
      operationId: "getMessagingInfo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Create Messaging in user Pool
      description: "Create messaging in user Pool"
      operationId: "createMessagingInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "User Pool"
          required: true
          schema:
            $ref: "#/definitions/Message" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/messages/{messageId}:
    get:
      tags:
        - User Pool 
      summary: Get Message using messageId in userpool
      description: "Get message using messageId in User pool"
      operationId: "getMessageByMessageId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "messageId"
          in: "path"
          description: "messageId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    put:
      tags:
        - User Pool 
      summary: Update message in user Pool
      description: "Update message in user Pool"
      operationId: "updateMessageInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "messageId"
          in: "path"
          description: "messageId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Message"
          required: true
          schema:
            $ref: "#/definitions/Message" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags:
        - User Pool 
      summary: delete message in user pool
      description: "User pool crud"
      operationId: "delete message in user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "messageId"
          in: "path"
          description: "messageId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/app-clients:
    get:
      tags:
        - User Pool 
      summary: List app client in userpool
      description: "List app client in userpool"
      operationId: "listAppClientInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    post:
      tags:
        - User Pool 
      summary: Update App client in user Pool
      description: "Update App client in user Pool"
      operationId: "updateAppClientInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "AppClientSchema"
          required: true
          schema:
            $ref: "#/definitions/AppClientSchema" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/{userPoolId}/app-clients/{clientId}:
    get:
      tags:
        - User Pool 
      summary: Get app-clients using clientId in userpool
      description: "Get app-clients using clientId in User pool"
      operationId: "getAppClientByClientId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "clientId"
          in: "path"
          description: "clientId"
          required: true
          type: "string" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    put:
      tags:
        - User Pool 
      summary: Update App Client in user Pool
      description: "Update app client in user Pool"
      operationId: "updateAppClientInUserPool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "clientId"
          in: "path"
          description: "clientId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "clientIdId"
          required: true
          schema:
            $ref: "#/definitions/AppClientSchema" 
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags:
        - User Pool 
      summary: delete app client in user pool
      description: "User pool crud"
      operationId: "delete app client in user pool"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userPoolId"
          in: "path"
          description: "userPoolId"
          required: true
          type: "string"
        - name: "clientId"
          in: "path"
          description: "clientId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /user-pool/dashboard/{userPoolId}:
    get:
      summary: "Get dashboard data for a user pool"
      description: "Fetches aggregated dashboard data for the specified user pool, including statistics like total users, active users, pending users, blocked users, MFA-enabled users, total groups, daily signups, and daily sign-ins."
      tags:
        - "User Pool"
      parameters:
        - name: userPoolId
          in: path
          required: true
          schema:
            type: string
            description: "The ID of the user pool for which to fetch dashboard data."
          example: "64e7b0f1c9f7e8a7b5b5b5b5"
      responses:
        '200':
          description: "Dashboard data successfully retrieved."
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                    description: "The total number of users in the user pool."
                    example: 150
                  active_users:
                    type: integer
                    description: "The number of active users in the user pool."
                    example: 120
                  pending_users:
                    type: integer
                    description: "The number of users with a pending status in the user pool."
                    example: 20
                  blocked_users:
                    type: integer
                    description: "The number of users with a blocked status in the user pool."
                    example: 10
                  mfa_enabled_users:
                    type: integer
                    description: "The number of users with multi-factor authentication enabled."
                    example: 80
                  total_groups:
                    type: integer
                    description: "The total number of groups in the user pool."
                    example: 5
                  daily_signups:
                    type: integer
                    description: "The number of sign-ups recorded today."
                    example: 10
                  daily_signins:
                    type: integer
                    description: "The number of sign-ins recorded today."
                    example: 30
        '404':
          description: "User pool not found."
        '500':
          description: "Error fetching dashboard data."
  /users:
    post:
      tags:
        - "Users"
      summary: "Register new user"
      description: ""
      operationId: "registerUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object for registration"
          required: true
          schema:
            $ref: "#/definitions/Users"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "User registration completed successfully"
      security:
        - api_key: []
    get: 
      tags:
        - "Users"
      summary: "Retrieve all users"
      description: ""
      operationId: "getUsers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Users"
        "400":
          description: "Invalid request"
  /users/user-search/filter:
    get:
      tags:
        - "Users"
      summary: "Search User"
      description: "Retrieve the User"
      operationId: "search user"
      produces:
        - "application/json"
      parameters:
        - in: query
          name: offset
          schema:
            type: "integer"
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: "integer"
          description: The numbers of items to return
        - in: query
          name: username
          schema:
            type: "string"
          description: It is used to filter required columns for table in UI
        - in: query
          name: email
          schema:
            type: "string"
          description: Used to filter out by email
        - in: query
          name: isActive
          schema:
            type: "string"
          description: Field name to sort
        - in: query
          name: limit
          schema:
            type: "string"
          description: Sorting order ex:- asc or desc
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Application"
        "400":
          description: "Internal server error"
          schema:
            type: "string"
  /users/login:
    post:
      tags:
        - "Users"
      summary: "Login existing user"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Login information"
          required: true
          schema:
            $ref: "#/definitions/LoginUser"
      responses:
        "201":
          description: "Login successfully."
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid params supplied"
  /users/send-otp:
    post:
      tags:
        - "Users"
      summary: "Send OTP for MFA"
      description: ""
      operationId: "sendOtp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Email for MFA"
          required: true
          schema:
            $ref: "#/definitions/SendOtp"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "OTP sent successfully!"
      security:
        - api_key: []
  /users/verify-otp:
    post:
      tags:
        - "Users"
      summary: "Verify OTP for MFA"
      description: ""
      operationId: "verifyOtp"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Email and OTP for MFA"
          required: true
          schema:
            $ref: "#/definitions/VerifyOtp"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "MFA completed successfully!"
      security:
        - api_key: []
  /users/forgot-password:
    post:
      tags:
        - "Users"
      summary: "Forgot password"
      description: ""
      operationId: "forgotPassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Forgot password"
          required: true
          schema:
            $ref: "#/definitions/ForgotPassword"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Password reset instructions sent successfully!"
      security:
        - api_key: []
  /users/reset-password:
    post:
      tags:
        - "Users"
      summary: "Reset password"
      description: ""
      operationId: "resetPassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Reset password"
          required: true
          schema:
            $ref: "#/definitions/ResetPassword"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Password updated successfully!"
      security:
        - api_key: []
  /document:
    post:
      tags:
        - "Documents"
      summary: "Upload document"
      description: "AWS SDK File upload APIs"
      operationId: "uploadDocument"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "file"
          type: "file"
          description: "File to upload"
          required: true
      responses:
        "200":
          description: "Successful operation"
  /document/{filekey}:
    get:
      tags:
        - "Documents"
      summary: "Download a document"
      description: "Download a file"
      operationId: "getDocumentByFileKey"
      produces:
        - "application/octet-stream"
      parameters:
        - name: "filekey"
          in: "path"
          description: "File Key"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "file"
        "404":
          description: "File not found"
  /profile:
    post:
      tags:
        - "Profile"
      summary: "Create or update user profile"
      description: ""
      operationId: "createOrUpdateUserProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User profile"
          required: true
          schema:
            $ref: "#/definitions/Profile"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "User profile created/updated successfully"
    get:
      tags:
        - "Profile"
      summary: "Retrieve all user profiles"
      description: ""
      operationId: "getAllUserProfiles"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Profile"
        "400":
          description: "Invalid input"
  /profile/{userId}:
    put:
      tags:
        - "Profile"
      summary: "Update user profile"
      description: ""
      operationId: "updateUserProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user profile"
          required: true
          schema:
            $ref: "#/definitions/Profile"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "User profile updated successfully"
    get:
      tags:
        - "Profile"
      summary: "Get user profile by userId"
      description: ""
      operationId: "getUserProfileByUserId"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to retrieve"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Profile"
        "400":
          description: "Invalid userId supplied"
        "404":
          description: "User not found"
  /profile/profile-search/filter:
    get:
      tags:
        - "Profile"
      summary: "Search User Profile"
      description: "Retrieve the User Profile"
      operationId: "search user profile"
      produces:
        - "application/json"
      parameters:
        - in: query
          name: limit
          schema:
            type: "integer"
          description: The numbers of items to return
        - in: query
          name: firstName
          schema:
            type: "string"
          description: Used to filter out by firstName
        - in: query
          name: lastName
          schema:
            type: "string"
          description: Used to filter out by lastName
        - in: query
          name: email
          schema:
            type: "string"
          description: Used to filter out by email
        - in: query
          name: dob
          schema:
            type: "string"
          description: Used to filter out by dob
        - in: query
          name: mobileNumber
          schema:
            type: "string"
          description: Used to filter out by mobileNumber
        - in: query
          name: isActive
          schema:
            type: "string"
          description: Field name to sort
        - in: query
          name: limit
          schema:
            type: "string"
          description: Sorting order ex:- asc or desc
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Internal server error"
          schema:
            type: "string"
  /payment/order:
    post:
      tags:
        - "Payment"
      summary: "Create Razorpay Pay Order"
      description: ""
      operationId: "createRazorPayOrder"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Razorpay Payment"
          required: true
          schema:
            $ref: "#/definitions/OrderPayment"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Order created successfully"
  /payment/verify-payment:
    post:
      tags:
        - "Payment"
      summary: "Razorpay Payment Verification"
      description: ""
      operationId: "verifyRazorPayPayment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Razorpay Payment Verification"
          required: true
          schema:
            $ref: "#/definitions/VerifyPayment"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Payment verified successfully"
  /payment/refund:
    post:
      tags:
        - "Payment"
      summary: "Razorpay Refund"
      description: ""
      operationId: "refundRazorPayPayment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Razorpay Refund"
          required: true
          schema:
            $ref: "#/definitions/RefundPayment"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Successfully refunded"
  /payment/partial-refund:
    post:
      tags:
        - "Payment"
      summary: "Razorpay Partial Refund"
      description: ""
      operationId: "partialRefundRazorPayPayment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Partial Refund Razorpay Payment"
          required: true
          schema:
            $ref: "#/definitions/PartialRefund"
      responses:
        "400":
          description: "Invalid input"
        "201":
          description: "Successfully refunded"
  /roles/{authNexusId}:
    get:
      tags:
        - "Role Management"
      summary: "Retrieve AuthNexus roles"
      description: "Retrieve AuthNexus roles"
      operationId: "getAuthNexusRoles"
      produces:
        - "application/json"
      parameters:
        - name: "authNexusId"
          in: "path"
          description: "authNexusId"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "AuthNexus"
        "404":
          description: "Notfound"
          schema:
            type: "String"
    put:
      tags:
        - "Role Management"
      summary: "Update AuthNexus role"
      description: ""
      operationId: "updateAuthNexusRoles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "authNexusId"
          in: "path"
          description: "authNexusId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Update AuthNexus roles"
          required: true
          schema:
            $ref: "#/definitions/AuthRoles"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/{authNexusId}/user-role:
    put:
      tags:
        - Role Management
      summary: "Update User role"
      description: ""
      operationId: "updateUserRole"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "authNexusId"
          in: "path"
          description: "authNexusId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Update User roles"
          required: true
          schema:
            $ref: "#/definitions/UserRoles"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/{authNexusId}/features:
    put:
      tags: 
        - Role Management
      summary: "Update authNexus Feature"
      description: ""
      operationId: "updateAuthNexusFeature"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "authNexusId"
          in: "path"
          description: "authNexusId"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Update User roles"
          required: true
          schema:
            $ref: "#/definitions/AuthNexusFeatures"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/role-by-user-id/{userId}:
    get:
      tags: 
        - Role Management
      summary: Retrieve role by user Id
      description: ""
      operationId: "getRolesByUserId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "userId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/user-by-role-id/{roleId}:
    get:
      tags: 
        - Role Management
      summary: Retrieve user by role Id
      description: ""
      operationId: "getUserByRoleId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "roleId"
          in: "path"
          description: "roleId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/{authNexusId}/features:
    get:
      tags: 
        - Role Management
      summary: Retrieve AuthNexus roles
      description: ""
      operationId: "getAuthNexusFeature"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "authNexusId"
          in: "path"
          description: "authNexusId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/{_id}:
    delete: 
      tags: 
        - Role Management
      summary: Delete AuthNexus Role
      description: ""
      operationId: "deleteAuthNexusRole"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "_id"
          in: "path"
          description: "_id"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /roles/{roleId}/{userId}/:
    delete: 
      tags: 
        - Role Management
      summary: Delete User Role
      description: ""
      operationId: "deleteUserRole"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "userId"
          required: true
          type: "string"
        - name: "roleId"
          in: "path"
          description: "roleId"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /admin-configs/email-templates:
    post:
      tags:
        - Admin Configs
      summary: Add Email Template Config
      description: "Add email template config"
      operationId: "addEmailTemplateConfig"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create Email Template Configs"
          required: true
          schema:
            $ref: "#/definitions/EmailTemplateConfig"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    get:
      tags:
        - Admin Configs
      summary: Retrieve Email Template Config
      description: "Retrieve email template config"
      operationId: "getEmailTemplate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
  /admin-configs/email-templates/{name}:
    put:
      tags: 
        - Admin Configs
      summary: Update Email Template
      description: "Update email template config"
      operationId: "updateEmailTemplateConfig"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "name"
          description: "Update Email Template Configs"
          required: true
        - in: "body"
          name: "body"
          description: "Update Email Template Configs"
          required: true
          schema:
            $ref: "#/definitions/EmailTemplateConfig"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
    delete:
      tags: 
        - Admin Configs
      summary: Delete Email Template
      description: "Delete email template config"
      operationId: " deleteEmailTemplateConfig"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "name"
          description: "Delete Email Template Configs"
          required: true
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"  
  /admin-configs/email-templates:
    get:
      tags:
        - Admin Configs
      summary: "Fetch email template"
      description: "Retreive email template"
      operationId: "getEmailTemplateConfig"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              schema:
                $ref: "#/definitions/EmailTemplateConfig"
        "404":
          description: "Notfound"
          schema:
            type: "String"
  /admin-configs/email-templates/{name}:
    get:
      tags:
        - Admin Configs
      summary: "Fetch email template by name"
      description: "Retreive email template by name"
      operationId: "getEmailTemplateConfigByName"
      produces:
        - "application/json"
      parameters:
        - in: path
        - name: name
          description: "retrieve email template by name"
          required: true
          type: "string" 
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              schema:
                $ref: "#/definitions/EmailTemplateConfig"
        "404":
          description: "Notfound"
          schema:
            type: "String"
  /admin-configs/send-mail:
    post:
      tags:
        - Admin Configs
      summary: User Notification (Notify through email)
      description: "notify user through mail"
      operationId: "sendEmailUserNotification"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Create Email Template Configs"
          required: true
          schema:
            $ref: "#/definitions/SendEmailTemplateConfig"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successfull Operation"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Users:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
    xml:
      name: "Users"
  LoginUser:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
    xml:
      name: "LoginUser"
  ForgotPassword:
    type: "object"
    properties:
      email:
        type: "string"
    xml:
      name: "ForgotPassword"
  PasswordResets:
    type: "object"
    properties:
      email:
        type: "string"
      newPassword:
        type: "string"
    xml:
      name: "PasswordResets"
  SendOtp:
    type: "object"
    properties:
      email:
        type: "string"
    xml:
      name: "SendOtp"
  VerifyOtp:
    type: "object"
    properties:
      email: 
        type: "string"
      otp:
        type: "string"
    xml:
      name: "VerifyOtp"
  ResetPassword:
    type: "object"
    properties:
      email: 
        type: "string"
      newPassword:
        type: "string"
    xml:
      name: "ResetPassword"
  Profile:
    type: "object"
    properties:
      userId: 
        type: "string"
      firstName: 
        type: "string"
      lastName:
        type: "string"
      dob:
        type: "string"
      mobileNumber: 
        type: "string"
      email:
        type: "string"
      isActive:
        type: "boolean"
    xml:
      name: "Profile"
  OrderPayment:
    type: "object"
    properties:
      orderId:
        type: "string"
      amount: 
        type: "number"
      currency: 
        type: "string"
      userId: 
        type: "string"
      customerName:
        type: "string"
      customerEmail:
        type: "string"
      customerPhone:
        type: "string"
    xml:
      name: "OrderPayment"
  VerifyPayment:
    type: "object"
    properties:
      razorpay_payment_id:
        type: "string"
      razorpay_order_id: 
        type: "string"
      razorpay_signature: 
        type: "string"
    xml:
      name: "VerifyPayment"
  RefundPayment:
    type: "object"
    properties:
      paymentId:
        type: "string"
    xml:
      name: "RefundPayment"
  PartialRefund:
    type: "object"
    properties: 
      paymentId: 
        type: "string"
      amount:
        type: "number"
    xml:
      name: "PartialRefund"
  AuthRoles:
    type: object
    properties:
      authNexusId:
        type: string
      roleName:
        type: string
      roles:  
        type: array  
        items:        
          $ref: '#/definitions/Roles'
  Roles: 
    type: object
    properties:
      featureCode:
        type: string
      all:
        type: boolean
      read:
        type: boolean
      write:
        type: boolean
      delete:
        type: boolean
      publish:
        type: boolean 
  UserRoles:
    type: object
    properties:
      authNexusId:
        type: string
      roleId:
        type: string
      users:  
        type: array  
        items:        
          $ref: '#/definitions/UserRole'
  UserRole: 
    type: object
    properties:
      userId:
        type: string
  AuthNexusFeature:
    type: object
    properties:
      authNexusId:
        type: string
      featureName:
        type: string
      featureCode:
        type: string
      publish:
        type: boolean
  EmailTemplateConfig: 
    type: object
    properties:
      name:
        type: string
      content:
        type: string
  SendEmailTemplateConfig:
    type: object
    properties:
      email:
        type: string
      subject:
        type: string
      content:
        type: string
  User:
    type: object
    properties:
      username:
        type: string
        unique: true
      email:
        type: string
        required: true
        unique: true
      phone_number:
        type: string
      password:
        type: string
      custom_attributes:
        type: object
      additionalProperties:
        type: string
      status:
        type: string
        enum:
          - active
          - pending
          - blocked
        default: active
      email_verified:
        type: boolean
        default: false
      phone_verified:
        type: boolean
        default: false
      mfa_enabled:
        type: boolean
        default: false
      roles:
        type: array
        items:
          type: string
      created_at:
        type: string
        format: date-time
        default: "now"
      updated_at:
        type: string
        format: date-time
        default: "now"
      last_login:
        type: string
        format: date-time
      provider:
        type: string
      provider_id:
        type: string
      federated_attributes:
        type: object
      additionalProperties:
        type: string
  Group:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      permissions:
        type: object
      additionalProperties:
        type: boolean
      members:
        type: array
        items:
          type: string
          format: ObjectId
      created_at:
        type: string
        format: date-time
        default: "now"
      updated_at:
        type: string
        format: date-time
        default: "now"
  SigninExp:
    type: object
    properties:
      allowed_flows:
        type: array
        items:
          type: string
          enum:
            - password
            - sso
            - mfa
      multi_factor_auth:
        type: boolean
        default: false
      login_message:
        type: string
      max_attempts:
        type: integer
        default: 5
      logout_duration:
        type: integer
        default: 30
      federated_identity_providers:
        type: array
        items:
          type: object
          properties:
            provider:
              type: string
            provider_id:
              type: string
      password_policy:
        type: object
        properties:
          min_length:
            type: integer
            default: 8
          require_uppercase:
            type: boolean
            default: true
          require_numbers:
            type: boolean
            default: true
          allowed_symbols:
            type: string
            default: "!@#$%^&*()_+[]{}|;:,.<>?"
      user_account_recovery:
        type: string
        enum:
          - email
          - sms
        default: email
  SigninExp:
    type: object
    properties:
      allowed_flows:
        type: array
        items:
          type: string
          enum:
            - password
            - sso
            - mfa
      multi_factor_auth:
        type: boolean
        default: false
      login_message:
        type: string
      max_attempts:
        type: integer
        default: 5
      logout_duration:
        type: integer
        default: 30
      federated_identity_providers:
        type: array
        items:
          type: object
          properties:
            provider:
              type: string
            provider_id:
              type: string
      password_policy:
        type: object
        properties:
          min_length:
            type: integer
            default: 8
          require_uppercase:
            type: boolean
            default: true
          require_numbers:
            type: boolean
            default: true
          allowed_symbols:
            type: string
            default: "!@#$%^&*()_+[]{}|;:,.<>?"
      user_account_recovery:
        type: string
        enum:
          - email
          - sms
        default: email
  SignupExp:
    type: object
    properties:
      required_attributes:
        type: array
        items:
          type: string
        default: ["email", "password", "address", "phone_number"]
      auto_confirm:
        type: boolean
        default: false
      welcome_message:
        type: string
      captcha_required:
        type: boolean
        default: false
      invite_only:
        type: boolean
        default: false
      custom_questions:
        type: array
        items:
          type: object
          properties:
            question:
              type: string
            answer:
              type: string
      attribute_verification:
        type: object
        properties:
          method:
            type: string
            enum:
              - Cognito-assisted
              - self-managed
            default: Cognito-assisted
          auto_send_verification_messages:
            type: boolean
            default: true
          verify_attributes:
            type: array
          items:
            type: string
            default: ["email"]
          keep_original_on_update_pending:
            type: boolean
            default: true
          active_attributes_on_pending:
            type: array
            items:
              type: string
            default: ["email"]
      account_confirmation_required:
        type: boolean
        default: true
      custom_attributes:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            type:
              type: string
              enum:
                - String
                - Number
                - Date
                - Boolean
            min_length:
              type: integer
              default: 0
            max_length:
              type: integer
              default: 255
            mutable:
              type: boolean
              default: true
      self_service_signup:
        type: boolean
        default: true
  Message:
    type: object
    properties:
      type:
        type: string
        enum:
          - email
          - sms
        required: true
      subject:
        type: string
      template:
        type: string
        required: true
      sender_email:
        type: string
        default: "pavithrar@bloomlync.com"
      sender_name:
        type: string
        default: "Pavithra Ravi <pavithraravi1902@gmail.com>"
      send_on:
        type: string
        enum:
          - signup
          - password_reset
          - custom
      reply_to_email:
        type: string
        default: "pavithraravi1902@gmail.com"
      templates:
        type: array
        items:
          type: object
          properties:
            message_type:
              type: string
              enum:
                - verification
                - invitation
                - mfa
              required: true
            delivery_method:
              type: array
              items:
                type: string
                enum:
                  - SMS
                  - Email
              required: true
  AppClientSchema:
    type: object
    properties:
      name:
        type: string
        required: true
      client_id:
        type: string
        required: true
      client_secret:
        type: string
        required: true
      redirect_uris:
        type: array
        items:
          type: string
        required: true
      authentication_flows:
        type: array
        items:
          type: string
          enum:
            - ALLOW_REFRESH_TOKEN_AUTH
            - ALLOW_USER_SRP_AUTH
            - ALLOW_CUSTOM_AUTH
            - ALLOW_ADMIN_USER_PASSWORD_AUTH
            - ALLOW_USER_PASSWORD_AUTH
      session_duration:
        type: integer
        default: 180
      refresh_token_expiration:
        type: integer
        default: 30
      access_token_expiration:
        type: integer
        default: 60
      id_token_expiration:
        type: integer
        default: 60
      advanced_auth_settings:
        type: object
        properties:
          token_revocation:
            type: boolean
            default: false
          prevent_user_existence_errors:
            type: boolean
            default: false
      attribute_permissions:
        type: object
        properties:
          read:
            type: array
            items:
              type: string
          write:
            type: array
            items:
              type: string
      pinpoint_analytics:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
      hosted_ui:
        type: object
        properties:
          status:
            type: string
            enum:
              - available
              - disabled
            default: available
          callback_urls:
            type: array
            items:
              type: string
          signout_urls:
            type: array
            items:
              type: string
          identity_providers:
            type: array
            items:
              type: string
          oauth_grant_types:
            type: array
            items:
              type: string
            enum:
              - authorization_code
              - implicit
            default:
              - authorization_code
          openid_connect_scopes:
            type: array
            items:
              type: string
            enum:
              - email
              - openid
              - phone
            default:
              - email
              - openid
          custom_scopes:
            type: array
            items:
              type: string
      hosted_ui_customization:
        type: object
        properties:
          logo:
            type: string
          custom_css:
            type: string
  AppIntegration:
    type: object
    properties:
      hosted_ui_domain:
        type: string
        default: "https://authhub.auth.ap-southeast-2.authNexus.com"
      custom_domain:
        type: string
      scopes:
        type: array
        items:
          type: string
      grant_types:
        type: array
        items:
          type: string
          enum:
            - authorization_code
            - client_credentials
        required: true
      token_lifetime:
        type: integer
        default: 3600
      resource_servers:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            identifier:
              type: string
            custom_scopes:
              type: array
              items:
                type: string
      app_clients:
        items:
          $ref: '#/definitions/AppClient'
  UserPoolProperties:
    type: object
    properties:
      pool_name:
        type: string
        required: true
      description:
        type: string
      domain:
        type: string
      region:
        type: string
        default: "ap-southeast-2"
      resource_server_name:
        type: string
      client_name:
        type: string
        required: true
      email_verification_message:
        type: string
      email_verification_subject:
        type: string
      sms_auth_message:
        type: string
      mfa_configuration:
        type: string
        enum:
          - OFF
          - ON
          - OPTIONAL
        default: OPTIONAL
      mfa_types:
        type: array
        items:
          type: string
          enum:
            - SMS
            - TOTP
        default: SMS
      user_pool_id:
        type: string
      lambda_config:
        type: object
        properties:
          pre_sign_up:
            type: string
          custom_message:
            type: string
          post_confirmation:
            type: string
          pre_authentication:
            type: string
          post_authentication:
            type: string
      password_policy:
        type: object
        properties:
          min_length:
            type: integer
          require_uppercase:
            type: boolean
          require_numbers:
            type: boolean
          require_symbols:
            type: boolean
  UserPool:
    type: object
    properties:
      name:
        type: string
      creation_date:
        type: string
        format: date-time
      status:
        type: string
        enum: ["active", "inactive"]
      admin_email:
        type: string
      domain:
        type: string
      default_group:
        type: string
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      groups:
        type: array
        items:
          $ref: '#/definitions/Group'
      signin_exp:
        type: array
        items:
          $ref: '#/definitions/SigninExp'
      signup_exp:
        type: array
        items:
          $ref: '#/definitions/SignupExp'
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
      app_integration:
        type: array
        items:
          $ref: '#/definitions/AppIntegration'
      user_pool_properties:
        type: array
        items:
          $ref: '#/definitions/UserPoolProperties'
      total_users:
        type: integer
      active_users:
        type: integer
      pending_users:
        type: integer
      blocked_users:
        type: integer
      total_groups:
        type: integer
      mfa_enabled_users:
        type: integer
      daily_signups:
        type: array
        items:
          type: string
          format: date-time
      daily_signins:
        type: array
        items:
          type: string
          format: date-time
      created_by:
        type: string
      updated_by:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
  CustomAttribute:
    type: object
    properties:
      name:
        type: string
        description: "The name of the custom attribute. It must be 20 characters or fewer."
        maxLength: 20
        example: "customAttribute1"
      type:
        type: string
        description: "The data type of the custom attribute."
        enum: 
          - String
          - Number
        example: "String"
      min_length:
        type: integer
        description: "Optional minimum length for the attribute if it's a string."
        minimum: 0
        example: 1
      max_length:
        type: integer
        description: "Optional maximum length for the attribute if it's a string."
        maximum: 2048
        example: 255
      mutable:
        type: boolean
        description: "Indicates whether the custom attribute can be modified after creation."
        default: false
        example: true
    required:
      - name
      - type
    description: |
      Custom attributes can be used to personalize the sign-up experience by adding up to 50 attributes per user pool.
      The name must be 20 characters or fewer, and attribute names cannot be changed after creation.
  CustomAttributesResponse:
    type: array
    items:
      $ref: '#/definition/CustomAttribute'
      description: "Array of custom attributes configured for a user pool."
  DashboardData:
    type: object
    properties:
      total_users:
        type: integer
        description: "The total number of users in the user pool."
        example: 150
      active_users:
        type: integer
        description: "The number of active users in the user pool."
        example: 120
      pending_users:
        type: integer
        description: "The number of users with a pending status in the user pool."
        example: 20
      blocked_users:
        type: integer
        description: "The number of users with a blocked status in the user pool."
        example: 10
      mfa_enabled_users:
        type: integer
        description: "The number of users with multi-factor authentication enabled."
        example: 80
      total_groups:
        type: integer
        description: "The total number of groups in the user pool."
        example: 5
      daily_signups:
        type: integer
        description: "The number of sign-ups recorded today."
        example: 10
      daily_signins:
        type: integer
        description: "The number of sign-ins recorded today."
        example: 30